<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DependencyGraph</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpreadsheetUtilities.DependencyGraph" -->
        <member name="T:SpreadsheetUtilities.DependencyGraph.Relation">
            <summary>
            Simple enum to specify a relation type of dependents or dependees
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.TryGetRelationSet(System.String,SpreadsheetUtilities.DependencyGraph.Relation,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Gets the associated set of dependents or dependees for the specified key
            </summary>
            <param name="key">Key of the set to get</param>
            <param name="type">Set type specifier for dependents or dependees</param>
            <param name="set">Variable to output the retrieved set</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasRelation(System.String,SpreadsheetUtilities.DependencyGraph.Relation)">
            <summary>
            Checks if the given key has any relations associated with it
            </summary>
            <param name="key">Key to check</param>
            <param name="type">Set type specifier for dependents or dependees</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddRelation(System.String,System.String,SpreadsheetUtilities.DependencyGraph.Relation)">
            <summary>
            Adds a relation for the given (key, val) pair with the type of relation specified as
            dependent or dependee
            </summary>
            <param name="key">Key of relation to add</param>
            <param name="val">Value to tie relation to</param>
            <param name="type">Relation type specifier for dependent or dependee</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveRelation(System.String,System.String,SpreadsheetUtilities.DependencyGraph.Relation)">
            <summary>
            Removes a relation for the given (key, val) pair
            </summary>
            <param name="key">Key of relation to remove</param>
            <param name="val">Value tied to relation</param>
            <param name="type">Relation type specifier for dependent or dependee</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceRelationSet(System.String,SpreadsheetUtilities.DependencyGraph.Relation,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replaces a relation set with a new one for the given key
            </summary>
            <param name="key">Key of relation to replace</param>
            <param name="type">Relation type specifier for dependent or dependee</param>
            <param name="newSet">The new relation set</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Small helper function to check if two strings are valid
            </summary>
            <param name="s1">String one</param>
            <param name="s2">String two</param>
            <returns></returns>
        </member>
    </members>
</doc>
