<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependees(System.String)">
            <summary>
            Gets the direct dependees of a cell (IE - what the cell depends upon).
            </summary>
            <param name="name">The name of the cell to check.</param>
            <returns>An IEnumerable of the dependees.</returns>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            The spreadsheet class represents an object consisting of an infinite number of cells.
            </summary>
            <remarks>Implements the <c>AbstractSpreadsheet</c> class.</remarks>
        </member>
        <member name="F:SS.Spreadsheet.EmptySet">
            <summary>
            An empty set used for replacing a cell's dependents/dependees with nothing.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.NamePattern">
            <summary>
            A regular expression that represents a valid cell name.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cells">
            <summary>
            Collection of cells in the spreadsheet.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.relations">
            <summary>
            Keeps track of cell dependence.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet.Cell">
            <summary>
            Nested class to represent a cell object.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Cell.Contents">
            <summary>
            The underlying contents of a cell.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Cell.Value">
            <summary>
            The calculated value of the cell's contents.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.Object)">
            <summary>
            Creates a new cell with the specified contents.
            </summary>
            <param name="contents">The contents inside the cell.</param>
        </member>
        <member name="M:SS.Spreadsheet.Cell.ToString">
            <summary>
            Produces contents of cell as a string.
            </summary>
            <returns>String representation of the cell's contents.</returns>
        </member>
        <member name="M:SS.Spreadsheet.Cell.CalculateValue(SS.Spreadsheet.Cell,SS.Spreadsheet)">
            <summary>
            Static method to handle calculating a cell's value.
            </summary>
            <param name="cell">The cell to calculate the value of.</param>
            <param name="ss">The instance of a spreadsheet that the cell belongs to.</param>
            <returns>A <c>string</c>, <c>double</c>, or <c>FormulaError</c>.</returns>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Creates an empty spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Creates an empty spreadhseet that takes validator delegate, a normalize delegate, and
            the spreadsheet version.
            </summary>
            <param name="isValid">The provided validator function.</param>
            <param name="normalize">The provided normalizer function.</param>
            <param name="version">The spreadsheet version.</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Reads spreadsheet data from the specified path and parses the data as a spreadsheet. Additionally, it
            takes a validator delegate, a normalize delegate, and the spreadsheet version.
            </summary>
            <param name="path">The path to the spreadsheet file.</param>
            <param name="isValid">The provided validator function.</param>
            <param name="normalize">The provided normalizer function.</param>
            <param name="version">The spreadsheet version.</param>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Gets the version of the specified spreadsheet file.
            </summary>
            <param name="filename">Filename of the spreadsheet.</param>
            <returns>Version of the spreadsheet.</returns>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Saves the spreadsheet to an XML file.
            </summary>
            <param name="filename">Filename to save out to.</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            Returns the value of cell.
            </summary>
            <param name="name">The name of the cell to lookup.</param>
            <returns>A <c>string</c>, <c>double</c>, or <c>FormulaError</c>.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Gets a collection of names for all non-empty cells.
            </summary>
            <returns>Names of non-empty cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            Returns contents of cell.
            </summary>
            <param name="name">The name of the cell to lookup.</param>
            <returns>A <c>string</c>, <c>double</c>, or <c>Formula</c> object.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            Sets the contents of the cell to the specified value.
            </summary>
            <param name="name">The name of the cell to modify.</param>
            <param name="content">The value to store in the cell's contents.</param>
            <returns>Set of names of cells that depend directly and indirectly on the given
            cell. The set also includes the given cell name.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            Sets contents of cell to a <c>double</c>.
            </summary>
            <param name="name">The name of the cell to modify.</param>
            <param name="number">The value to store in the cell's contents.</param>
            <returns>Set of names of cells that depend directly and indirectly on the given
            cell. The set also includes the given cell name.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            Sets contents of cell to a <c>string</c>.
            </summary>
            <param name="name">The name of the cell to modify.</param>
            <param name="text">The value to store in the cell's contents.</param>
            <returns>Set of names of cells that depend directly and indirectly on the given
            cell. The set also includes the given cell name.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            Sets contents of cell to a <c>Formula</c>.
            </summary>
            <param name="name">The name of the cell to modify.</param>
            <param name="formula">The value to store in the cell's contents.</param>
            <returns>Set of names of cells that depend directly and indirectly on the given
            cell. The set also includes the given cell name.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            Gets a collection of names for cells directly dependent on given cell.
            </summary>
            <param name="name">The name of the cell to lookup.</param>
            <returns>Names of dependent cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependees(System.String)">
            <summary>
            Gets the direct dependees of a cell (IE - what the cell depends upon).
            </summary>
            <param name="name">The name of the cell to check.</param>
            <returns>An IEnumerable of the dependees.</returns>
        </member>
        <member name="M:SS.Spreadsheet.ReadSpreadsheetFromXml(System.String)">
            <summary>
            Helper method that reads a spreadsheet from file.
            </summary>
            <param name="filename">The filename of the spreadsheet to read.</param>
        </member>
        <member name="M:SS.Spreadsheet.ReadCellElements(System.Xml.XmlReader,System.String@,System.String@)">
            <summary>
            Helper function that gets the subelements of a cell element when reading XML.
            </summary>
            <param name="reader">The XmlReader to use.</param>
            <param name="name">Output of the cell name read.</param>
            <param name="contents">Output of the cell contents read.</param>
        </member>
        <member name="M:SS.Spreadsheet.CheckSpreadsheetVersions(System.String)">
            <summary>
            Helper method that compares versions of spreadsheets.
            </summary>
            <param name="inputVersion">The version to check against.</param>
        </member>
        <member name="M:SS.Spreadsheet.CheckCellName(System.String)">
            <summary>
            Helper method that checks an incoming cell name.
            </summary>
            <param name="name">The name of the cell to check.</param>
            <returns>The name of the cell if it is valid.</returns>
        </member>
        <member name="M:SS.Spreadsheet.ReadVersionFromXml(System.String)">
            <summary>
            Helper method that reads the version info from a spreadsheet file.
            </summary>
            <param name="filename">Filename of spreadsheet to check.</param>
            <returns>A string of the version.</returns>
        </member>
        <member name="M:SS.Spreadsheet.ShouldSave(System.String)">
            <summary>
            Helper method to determine if a save sequence should happen.
            </summary>
            <param name="filename">Filename to write out to.</param>
            <returns>True if the spreadsheet has been changed.</returns>
        </member>
        <member name="M:SS.Spreadsheet.InitWriter(System.String)">
            <summary>
            Helper method that initializes an XmlWriter.
            </summary>
            <param name="filename">Filename for the writer to write out to.</param>
            <returns>An XmlWriter object.</returns>
        </member>
        <member name="M:SS.Spreadsheet.WriteSpreadsheetToXml(System.Xml.XmlWriter)">
            <summary>
            Helper method that outputs the spreadsheet as an XML file.
            </summary>
            <param name="writer">The initialized XmlWriter to use.</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCellMember(System.String,System.Boolean)">
            <summary>
            Helper method that gets contents or value of a cell.
            </summary>
            <param name="name">The name of the cell to lookup</param>
            <param name="getContents">Bool that if set true the method will get the contents.
            Otherwise the method gets the value.</param>
            <returns>Contens or value of cell.</returns>
        </member>
        <member name="M:SS.Spreadsheet._SetCellContents(System.String,System.Object)">
            <summary>
            Helper method that sets contents of a cell.
            </summary>
            <param name="name">The name of the cell to modify.</param>
            <param name="contents">The value to store in the cell's contents.</param>
        </member>
        <member name="M:SS.Spreadsheet.UpdateCellContents(System.String,System.Object)">
            <summary>
            Helper method that updates a cell's contents and dependence.
            </summary>
            <remarks>Utilizes the <c>GetCellsToRecalculate</c> method from
            <c>AbstractSpreadsheet</c>. Also applies Normalize to name.</remarks>
            <param name="name">The name of the cell to update.</param>
            <param name="contents">The value to store in the cell's contents.</param>
            <returns>Set of names of cells that depend directly and indirectly on the given
            cell. The set also includes the given cell name.</returns>
        </member>
        <member name="M:SS.Spreadsheet.TryGetCell(System.String,SS.Spreadsheet.Cell@)">
            <summary>
            Helper method that attempts to get a cell object if it exists.
            </summary>
            <param name="name">The name of the cell to lookup.</param>
            <param name="cell">Output parameter that will contain the cell object if
            the lookup is successful.</param>
            <returns>True or false depending on if the lookup succeeded.</returns>
        </member>
        <member name="M:SS.Spreadsheet.ParseCellsToRecalculate(System.String,System.Object)">
            <summary>
            Helper method to safely get cells that need to be recalculated.
            </summary>
            <param name="name">The name of the cell to check.</param>
            <param name="originalContents">The cell's original contents, if it has any.</param>
            <returns>Ordered set of cells to recalculate.</returns>
        </member>
        <member name="M:SS.Spreadsheet.RecalculateCells(System.Collections.Generic.ISet{System.String})">
            <summary>
            Helper method to do recalculation for a set of cell names.
            </summary>
            <param name="cellNames">Names of cells to recalculate.</param>
        </member>
        <member name="M:SS.Spreadsheet.ParseDependees(System.String,System.Object)">
            <summary>
            Helper method to decide which dependees to update.
            </summary>
            <param name="name">The name of the cell to update.</param>
            <param name="contents">The value to store in the cell's contents.</param>
        </member>
        <member name="M:SS.Spreadsheet.UpdateDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Helper method that updates the given cell's dependees.
            </summary>
            <param name="name">The name of the cell to update.</param>
            <param name="newSet">The new set of dependees to replace the old.</param>
        </member>
        <member name="M:SS.Spreadsheet.CellLookup(System.String)">
            <summary>
            A lookup function meant to be provided as a delegate. Will get the value
            of the cell in question.
            </summary>
            <param name="name">The name of the cell to lookup.</param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.InitFields(System.Boolean)">
            <summary>
            Helper method that initializes basic components for constructors.
            </summary>
            <param name="changed">Whether or not the spreadsheet has been changed. Useful for loading spreadsheets
            vs. creating new spreadsheets.</param>
        </member>
        <member name="M:SS.Spreadsheet.IsValidName(System.String)">
            <summary>
            Helper method that checks a given cell name's validity.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if valid, false if not.</returns>
        </member>
        <member name="M:SS.Spreadsheet.IsFormula(System.String)">
            <summary>
            Helper method to improve readability when setting the cell's contents which might be a Formula
            object.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value matches the formula formatting criteria; else false.</returns>
        </member>
    </members>
</doc>
