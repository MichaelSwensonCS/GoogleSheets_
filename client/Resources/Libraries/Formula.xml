<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.Formula.InitParams">
            <summary>
            Struct for holding the parameters from a Formula constructor call.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.InitParams.Formula">
            <summary>
            The original formula given from the Formula constructor.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.InitParams.Normalize">
            <summary>
            The original normalize function given from the Formula constructor.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.InitParams.IsValid">
            <summary>
            The original isValid function given from the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.InitParams.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Constructor that takes a formula along the normalize and isValid functions.
            </summary>
            <param name="formula">The formula string</param>
            <param name="normalize">The provided normalize function</param>
            <param name="isValid">The provided isValid function</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens and variable tokens.
            Numeric tokens are considered equal if they are equal after being "normalized" 
            by C#'s standard conversion from string to double, then back to string. This 
            eliminates any inconsistencies due to limited floating point precision.
            Variable tokens are considered equal if their normalized forms are equal, as 
            defined by the provided normalizer.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.StoreResult(System.Double)">
            <summary>
            Helper function to cache result of a simple evaluation
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ValidateFormula(SpreadsheetUtilities.Formula.InitParams)">
            <summary>
            Helper function to validate a formula and output the tokenized strings of the formula, a
            string of the formula after being formatted, and a set of all the variables in the formula.
            All these outputs are tied together and returned as a Tuple.
            </summary>
            <param name="args">Initial parameters given from the constructor call</param>
            <returns>Tuple</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.TryValidateToken(System.String,SpreadsheetUtilities.Formula.InitParams,SpreadsheetUtilities.Formula.Verify,System.String[]@)">
            <summary>
            Helper function to attempt validation of a given token. If a variable is normalized or a
            number is parsed then they will be returned in the out parameter.
            </summary>
            <param name="token">The token to validate</param>
            <param name="args">Initial parameters given from the constructor call</param>
            <param name="verify">The validation side effects for the current validation</param>
            <param name="output">A Normalized variable in [0] or a parsed double in [1]</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.CheckOperatorToken(System.String,SpreadsheetUtilities.Formula.Verify)">
            <summary>
            Helper class to aid in parenthesis count tracking
            </summary>
            <param name="token">Token being checked</param>
            <param name="verify">An instance of side effects that may happen during formula evlauation</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsNumber(System.String)">
            <summary>
            Helper class to improve readability of token checking for a number
            </summary>
            <param name="token">Token being checked</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsOperator(System.String)">
            <summary>
            Helper class to improve readability of token checking for an operator
            </summary>
            <param name="token">Token being checked</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsVariable(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Helper class to improve readability of token checking for variables. This checks
            that a normalized variable meets the basic and isValid requirements.
            </summary>
            <param name="token">Token being checked</param>
            <param name="isValid">Function provided to perform additional variable checking</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsScientificNotation(System.String)">
            <summary>
            Helper class to improve readability of token checking for a number that
            is represented in scientific notation
            </summary>
            <param name="token">Token being checked</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ConvertScientificToPlainDouble(System.String)">
            <summary>
            Helper class to convert a scientific notation number into a double
            </summary>
            <param name="token">Token to be parsed</param>
            <returns>double</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.BothAreNull``1(``0,``0)">
            <summary>
            Helper class to improve readability of the check v1 == null and v2 == null
            for operator overloading
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="v1">First variable</param>
            <param name="v2">Second variable</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EitherAreNull``1(``0,``0)">
            <summary>
            Helper class to improve readability of the check v1 == null or v2 == null
            for operator overloading
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="v1">First variable</param>
            <param name="v2">Second variable</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsNull``1(``0)">
            <summary>
            Helper class to improve readability of the check v == null for operator overloading
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="v">First variable</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ParseOperation(System.Double,System.Double,System.String)">
            <summary>
            Handles the calculation of a number performing a basic arithmetic operation on another number.
            </summary>
            <param name="val1">The number being operated on</param>
            <param name="val2">The number to operate with</param>
            <param name="op">The operation symbol</param>
            <returns>double</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ParseOperation(System.Collections.Generic.Stack{System.Double},System.String)">
            <summary>
            Pops two values from a given stack of numbers and passes them as arguments to the
            ParseOperation(double val1, double val2, string op) method.
            </summary>
            <param name="values">The stack of numbers to use for the operation</param>
            <param name="op">The operation symbol</param>
            <returns>double</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.TryHandleNumberToken(System.String,System.Collections.Generic.Stack{System.Double}@,System.Collections.Generic.Stack{System.String}@,System.String@)">
            <summary>
            Helper method for when a number token is encountered
            </summary>
            <param name="token">The token as a number</param>
            <param name="valStack">The value stack</param>
            <param name="opStack">The operator stack</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.TryHandleOperatorToken(System.String,System.Collections.Generic.Stack{System.Double}@,System.Collections.Generic.Stack{System.String}@,System.String@)">
            <summary>
            Helper method for when an operator token is encountered
            </summary>
            <param name="token">The operator token</param>
            <param name="valStack">The value stack</param>
            <param name="opStack">The operator stack</param>
            <returns>bool</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.TryHandleVariableToken(System.String,System.Func{System.String,System.Double},System.Collections.Generic.Stack{System.Double}@,System.Collections.Generic.Stack{System.String}@,System.String@)">
            <summary>
            Helper method for when a variable token is encountered
            </summary>
            <param name="token">The variable token</param>
            <param name="variableEvaluator">The evaluation delegate</param>
            <param name="valStack">The value stack</param>
            <param name="opStack">The operator stack</param>
            <returns>bool</returns>
        </member>
        <member name="T:SpreadsheetUtilities.Formula.Verify">
            <summary>
            A nested class to track and confirm each sequence of validation
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.Verify.LpCount">
            <summary>
            The total count of left parenthesis during formula validation
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.Formula.Verify.RpCount">
            <summary>
            The total count of right parenthesis during formula validation
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Verify.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Verify.ConfirmInitialConditions(System.String)">
            <summary>
            Checks to make sure initial validation conditions are met.
            </summary>
            <param name="token">Token being verified</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Verify.ConfirmCurrentConditions(System.String,System.String,System.Int32)">
            <summary>
            Checks during a validation sequence that all conditions hold true.
            </summary>
            <param name="current">Current token being validated</param>
            <param name="previous">Previous token that was validated</param>
            <param name="iteration">Current iteration in sequence</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Verify.ConfirmFinalConditions(System.String)">
            <summary>
            Checks after the validation sequence is complete that all conditions hold true.
            </summary>
            <param name="token">Token to check</param>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.StackExtensions">
            <summary>
            An extension provided for the Stack class with a method to safely evaluate whether an object
            resides at the top of the given stack.
            </summary>
        </member>
    </members>
</doc>
